@page "/"
@using ASM_NhomSugar_SD19311.DTO
@using ASM_NhomSugar_SD19311.Data
@using ASM_NhomSugar_SD19311.Model
@using ASM_NhomSugar_SD19311.Service
@using Microsoft.EntityFrameworkCore
@using Microsoft.JSInterop
@inject HttpClient Http
@using static System.Net.WebRequestMethods
@inject CakeShopDbContext _context
@inject NavigationManager NavigationManager
@inject IJSRuntime JS
@inject ShoppingCartService ShoppingCartService
@inject NavigationManager Navigation
@inject Blazored.LocalStorage.ILocalStorageService LocalStorage
<link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/slick-carousel/1.9.0/slick-theme.min.css" integrity="sha512-17EgCFERpgZKcm0j0fEq1YCJuyAWdz9KUtv1EjVuaOz8pDnh/0nZxmU6BBXwaaxqoi9PQXnRWqlcDB027hgv9A==" crossorigin="anonymous" referrerpolicy="no-referrer" />
<link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/slick-carousel/1.9.0/slick.min.css" integrity="sha512-yHknP1/AwR+yx26cB1y0cjvQUMvEa2PFzt1c9LlS4pRQ5NOTZFWbhBig+X9G9eYW/8m0/4OXNx8pxJ6z57x0dw==" crossorigin="anonymous" referrerpolicy="no-referrer" />
<script src="https://cdn.tailwindcss.com"></script>
<link href="css/home.css" rel="stylesheet" />
<link href="css/site.js" rel="stylesheet" />
<!-- 🔝 Thanh điều hướng -->
<header class="sticky top-0 z-20 border-b bg-white py-4 shadow-sm">
    <div class="container mx-auto flex justify-between">
        <a class="navbar-brand text-danger fw-bold" href="/layout">🍰 SweetCake</a>
        <ul class="flex gap-x-3">
            <li class="text-sm hover:underline hover:text-primary"><a class="nav-link" href="/home">Trang Chủ</a></li>
            <li class="text-sm hover:underline hover:text-primary"><a class="nav-link" href="/products">Sản Phẩm</a></li>
            <li class="text-sm hover:underline hover:text-primary"><a class="nav-link" href="/cart">Giỏ Hàng</a></li>
            <li class="text-sm hover:underline hover:text-primary"><a class="nav-link" href="/contact">Liên Hệ</a></li>
            @if (isAuthenticated && userRole == "Admin")
            {
                <li class="text-sm hover:underline hover:text-primary"><a class="nav-link" href="/layout">Quản lý</a></li>
            }
            @if (isAuthenticated)
            {
                <li class="text-sm text-gray-600">Xin chào, @userEmail</li>
                <li class="text-sm hover:underline hover:text-primary"><a class="nav-link" href="/logout">Đăng xuất</a></li>
            }
            else
            {
                <li class="text-sm hover:underline hover:text-primary"><a class="nav-link" href="/register">Đăng ký</a></li>
                <li class="text-sm hover:underline hover:text-primary"><a class="nav-link" href="/login">Đăng nhập</a></li>
            }
        </ul>
    </div>
</header>

<!-- 🎬 Banner Slideshow -->
<div class="banner overflow-hidden">
    <img class="h-[500px] w-full object-fill object-center" src="images/banner1.png" alt="Bánh Ngon 1">
    <img class="h-[500px] w-full object-fill object-center" src="images/banner2.jpg" alt="Bánh Ngon 2">
    <img class="h-[500px] w-full object-fill object-center" src="images/banner3.jpg" alt="Bánh Ngon 3">
</div>
@* Products *@
<div>
    <div class="container mx-auto py-12">
        <!-- 🔍 Thanh tìm kiếm -->
        <div class="mb-6 text-center">
            <input type="text" @bind="searchQuery" @bind:event="oninput" class="form-control d-inline-block w-50" placeholder="Tìm kiếm bánh ngọt...">
            <button class="btn btn-primary ms-2 text-white" @onclick="SearchProducts">🔍 Tìm kiếm</button>
        </div>


        <h3 class="mb-6 text-center text-lg font-semibold">🎂 Sản Phẩm Nổi Bật</h3>

        @if (products == null)
        {
            <p class="text-muted text-center">Đang tải sản phẩm...</p>
        }
        else if (!products.Any())
        {
            <p class="text-warning text-center">Không tìm thấy sản phẩm nào.</p>
        }
        else
        {
            <div class="grid grid-cols-4 items-center justify-center gap-6">
                @foreach (var product in products)
                {
                    <div class="overflow-hidden rounded-lg shadow-md">
                        <img src="@product.ImagePath" class="h-[196px] w-full object-cover object-center" alt="@product.Name" style="">
                        <div class="p-4">
                            <h5 class="mb-1 font-semibold">@product.Name</h5>
                            <p class="mb-1">@product.Description</p>
                            <h6 class="text-lg font-bold text-[#dc3545]">@product.Price.ToString("N0") VNĐ</h6>
                            <button class="mt-3 w-full rounded-full bg-[#dc3545] py-2 text-white"
                                    @onclick="() => AddToCart(product.Id)">
                                🛒Thêm vào giỏ
                            </button>

                        </div>
                    </div>
                }
            </div>
        }

    </div>

</div>


<!-- 📢 Phần giới thiệu -->
<div class="bg-[#f8f9fa] py-12">
    <div class="container mx-auto text-center">
        <h3 class="mb-6 text-center text-lg font-semibold">🍰 Giới Thiệu SweetCake</h3>
        <p class="text-muted">SweetCake - cửa hàng bánh ngọt hàng đầu với nguyên liệu tự nhiên và hương vị thơm ngon.</p>
    </div>
</div>

<!-- 📌 Chân trang -->
<footer class="bg-dark p-12 text-center text-white">
    <p>© 2025 SweetCake. All Rights Reserved.</p>
</footer>
<script src="https://cdnjs.cloudflare.com/ajax/libs/jquery/3.7.1/jquery.min.js" integrity="sha512-v2CJ7UaYy4JwqLDIrZUI/4hqeoQieOmAZNXBeQyjo21dadnwR+8ZaIJVT8EE2iyI61OV8e6M8PP2/4hpQINQ/g==" crossorigin="anonymous" referrerpolicy="no-referrer"></script>
<script src="https://cdnjs.cloudflare.com/ajax/libs/slick-carousel/1.9.0/slick.min.js" integrity="sha512-HGOnQO9+SP1V92SrtZfjqxxtLmVzqZpjFFekvzZVWoiASSQgSr4cw9Kqd2+l8Llp4Gm0G8GIFJ4ddwZilcdb8A==" crossorigin="anonymous" referrerpolicy="no-referrer"></script>


<script>
    $(document).ready(function () {
        var currentSlide = localStorage.getItem('currentSlide') || 0;

        var slickBanner = $('.banner').slick({
            slidesToShow: 1,
            slidesToScroll: 1,
            autoplay: true,
            autoplaySpeed: 2000,
            initialSlide: parseInt(currentSlide),
        });

        slickBanner.on('afterChange', function (event, slick, currentSlide) {
            localStorage.setItem('currentSlide', currentSlide);
        });
    });

    window.clearAuthData = function () {
        localStorage.removeItem('authToken');
        localStorage.removeItem('userEmail');
    };
</script>



@code {
    private List<Products>? products;
    private string searchQuery = "";
    private bool isAuthenticated = false;
    private string userEmail = "";
    private string userRole = "";
    private int customerId = 0;
    private int cartItemCount = 0;

    protected override async Task OnInitializedAsync()
    {
        products = await _context.Products.ToListAsync();
        await CheckRoleAndRedirect(); // Kiểm tra ngay khi khởi tạo
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await LoadAuthState();
            await CheckRoleAndRedirect(); // Kiểm tra sau khi render
            StateHasChanged();
        }
    }



    private async Task AddToCart(int productId)
    {
        if (!isAuthenticated || customerId == 0)
        {
            await JS.InvokeVoidAsync("alert", "Vui lòng đăng nhập để thêm vào giỏ hàng!");
            Navigation.NavigateTo("/login");
            return;
        }

        try
        {
            var addToCartRequest = new AddToCartRequest
                {
                    CustomerId = customerId,
                    ProductId = productId,
                    Quantity = 1 // You can modify this if you want users to choose quantity
                };

            var response = await Http.PostAsJsonAsync("https://localhost:44366/api/cart/add", addToCartRequest);

            if (response.IsSuccessStatusCode)
            {
                await JS.InvokeVoidAsync("alert", "Đã thêm sản phẩm vào giỏ hàng!");
                await UpdateCartItemCount();
            }
            else
            {
                var errorMessage = await response.Content.ReadAsStringAsync();
                await JS.InvokeVoidAsync("alert", $"Lỗi: {errorMessage}");
            }
        }
        catch (Exception ex)
        {
            await JS.InvokeVoidAsync("alert", $"Lỗi: {ex.Message}");
        }
    }


    private async Task UpdateCartItemCount()
    {
        if (isAuthenticated && customerId != 0)
        {
            cartItemCount = await ShoppingCartService.GetCartItemCountAsync(customerId);
            StateHasChanged();
        }
    }

    private async Task LoadAuthState()
    {
        try
        {
            var token = await LocalStorage.GetItemAsync<string>("authToken");
            var email = await LocalStorage.GetItemAsync<string>("userEmail");
            var role = await LocalStorage.GetItemAsync<string>("userRole");
            Console.WriteLine($"LocalStorage - Token: {token}, Email: {email}, Role: {role}");

            if (!string.IsNullOrEmpty(token) && !string.IsNullOrEmpty(email) && !string.IsNullOrEmpty(role))
            {
                isAuthenticated = true;
                userEmail = email;
                userRole = role;
            }
            else
            {
                isAuthenticated = false;
                userEmail = "";
                userRole = "";
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error loading auth state: {ex.Message}");
        }
    }

    private async Task CheckRoleAndRedirect()
    {
        if (!isAuthenticated) return;

        Console.WriteLine($"Checking role: {userRole}, Current URL: {Navigation.Uri}");

        try
        {
            var token = await LocalStorage.GetItemAsync<string>("authToken");
            Http.DefaultRequestHeaders.Authorization = new System.Net.Http.Headers.AuthenticationHeaderValue("Bearer", token);
            var response = await Http.GetAsync("https://localhost:44366/api/account/check-role");

            if (response.IsSuccessStatusCode)
            {
                var result = await response.Content.ReadFromJsonAsync<CheckRoleResponse>();
                Console.WriteLine($"API Response - Allowed: {result.Allowed}, Redirect: {result.Redirect}");
                if (result.Allowed && result.Redirect == "/layout")
                {
                    // Role là Admin, cho phép vào /layout
                    return;
                }
            }
            else if (response.StatusCode == System.Net.HttpStatusCode.Forbidden)
            {
                var result = await response.Content.ReadFromJsonAsync<CheckRoleResponse>();
                Console.WriteLine($"Forbidden - Allowed: {result.Allowed}, Redirect: {result.Redirect}");
                if (!result.Allowed && Navigation.Uri.Contains("/layout"))
                {
                    Navigation.NavigateTo("/access-denied", forceLoad: true);
                }
            }
            else
            {
                Console.WriteLine($"Unexpected response: {response.StatusCode}");
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error checking role: {ex.Message}");
        }

        // Kiểm tra role từ LocalStorage như biện pháp dự phòng
        if (userRole != "Admin" && Navigation.Uri.Contains("/layout"))
        {
            Navigation.NavigateTo("/access-denied", forceLoad: true);
        }
    }

    private void SearchProducts()
    {
        if (string.IsNullOrWhiteSpace(searchQuery))
        {
            products = _context.Products.ToList();
        }
        else
        {
            products = _context.Products
                .Where(p => p.Name.Contains(searchQuery, StringComparison.OrdinalIgnoreCase))
                .ToList();
        }
    }

    private async Task Logout()
    {
        var response = await Http.PostAsync("api/account/logout", null);
        if (response.IsSuccessStatusCode)
        {
            await JS.InvokeVoidAsync("clearAuthData");
            isAuthenticated = false;
            userEmail = "";
            userRole = "";
            StateHasChanged();
            Navigation.NavigateTo("/login", forceLoad: true);
        }
        else
        {
            Console.WriteLine("Logout API call failed");
        }
    }
    private class CheckRoleResponse
    {
        public bool Allowed { get; set; }
        public string Redirect { get; set; }
        public string Message { get; set; }
    }
}