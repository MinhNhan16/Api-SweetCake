@* Pages/UserManagement.razor *@
@page "/user"
@using ASM_NhomSugar_SD19311.Model
@using Microsoft.JSInterop
@inject HttpClient Http
@inject NavigationManager NavigationManager
@inject IJSRuntime JSRuntime
@using Microsoft.AspNetCore.Components.Forms

<h3 class="mb-4 text-2xl font-bold">Quản lý người dùng</h3>

<!-- Form cố định -->
<div class="mb-6 rounded-lg bg-white p-6 shadow">
    <h4 class="mb-4 text-lg font-semibold">@((isEditMode ? "Sửa người dùng" : "Thêm người dùng"))</h4>
    <EditForm Model="@currentUser" OnValidSubmit="HandleValidSubmit">
        <DataAnnotationsValidator />
        <div class="mb-4">
            <label class="mb-1 block font-medium">Tên đầy đủ</label>
            <InputText class="w-full rounded border px-3 py-2" @bind-Value="currentUser.FullName" />
            <ValidationMessage For="@(() => currentUser.FullName)" class="text-red-500 text-sm" />
        </div>
        <div class="mb-4">
            <label class="mb-1 block font-medium">Số điện thoại</label>
            <InputText class="w-full rounded border px-3 py-2" @bind-Value="currentUser.Phone" />
            <ValidationMessage For="@(() => currentUser.Phone)" class="text-red-500 text-sm" />
        </div>
        <div class="mb-4">
            <label class="mb-1 block font-medium">Địa chỉ</label>
            <InputText class="w-full rounded border px-3 py-2" @bind-Value="currentUser.Address" />
            <ValidationMessage For="@(() => currentUser.Address)" class="text-red-500 text-sm" />
        </div>
        <div class="mb-4">
            <label class="mb-1 block font-medium">Tài khoản</label>
            <InputText class="w-full rounded border px-3 py-2" @bind-Value="currentUser.Address" />
            <ValidationMessage For="@(() => currentUser.Address)" class="text-red-500 text-sm" />
        </div>
        <div class="flex justify-end space-x-2">
            <button type="submit" class="rounded bg-blue-600 px-4 py-2 text-white transition hover:bg-blue-700">Lưu</button>
            <button type="button" class="rounded bg-gray-300 px-4 py-2 text-gray-800 transition hover:bg-gray-400" @onclick="ResetForm">Hủy</button>
        </div>
    </EditForm>
</div>

@if (users == null)
{
    <p class="text-gray-500 italic">Đang tải...</p>
}
else
{
    <div class="overflow-x-auto">
        <table class="min-w-full rounded-lg border bg-white shadow">
            <thead class="bg-gray-100 text-gray-700">
                <tr>
                    <th class="px-4 py-2 text-left">ID</th>
                    <th class="px-4 py-2 text-left">Tên đầy đủ</th>
                    <th class="px-4 py-2 text-left">Số điện thoại</th>
                    <th class="px-4 py-2 text-left">Địa chỉ</th>
                    <th class="px-4 py-2 text-left">Tài khoản</th>
                    <th class="px-4 py-2 text-left">Hành động</th>
                </tr>
            </thead>
            <tbody>
                @foreach (var user in users)
                {
                    <tr class="border-t hover:bg-gray-50">
                        <td class="px-4 py-2">@user.Id</td>
                        <td class="px-4 py-2">@user.FullName</td>
                        <td class="px-4 py-2">@user.Phone</td>
                        <td class="px-4 py-2">@user.Address</td>
                        <td class="px-4 py-2">@user.Account?.Username</td>
                        <td class="space-x-2 px-4 py-2">
                            <button class="rounded bg-yellow-500 px-3 py-1 text-white transition hover:bg-yellow-600" @onclick="() => ShowEditUser(user)">Sửa</button>
                            <button class="rounded bg-red-600 px-3 py-1 text-white transition hover:bg-red-700" @onclick="() => DeleteUser(user.Id)">Xóa</button>
                        </td>
                    </tr>
                }
            </tbody>
        </table>
    </div>
}

@code {
    private List<Users> users;
    private List<Accounts> accounts;
    private Users currentUser = new Users();
    private bool isEditMode = false;

    protected override async Task OnInitializedAsync()
    {
        await LoadUsers();
        await LoadAccounts();
    }

    private async Task LoadUsers()
    {
        try
        {
            Console.WriteLine("Đang tải danh sách người dùng...");
            var response = await Http.GetAsync("https://localhost:44366/api/user");
            Console.WriteLine($"Phản hồi từ API: {response.StatusCode}");
            if (response.IsSuccessStatusCode)
            {
                users = await response.Content.ReadFromJsonAsync<List<Users>>();
                Console.WriteLine($"Số người dùng tải được: {users?.Count ?? 0}");
            }
            else
            {
                await JSRuntime.InvokeVoidAsync("alert", "Không thể tải danh sách người dùng.");
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Lỗi khi tải người dùng: {ex.Message}");
        }
    }

    private async Task LoadAccounts()
    {
        try
        {
            Console.WriteLine("Đang tải danh sách tài khoản...");
            var response = await Http.GetAsync("https://localhost:44366/api/user/accounts");
            if (response.IsSuccessStatusCode)
            {
                accounts = await response.Content.ReadFromJsonAsync<List<Accounts>>();
                Console.WriteLine($"Số tài khoản tải được: {accounts?.Count ?? 0}");
            }
            else
            {
                await JSRuntime.InvokeVoidAsync("alert", "Không thể tải danh sách tài khoản.");
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Lỗi khi tải tài khoản: {ex.Message}");
        }
    }

    private void ShowEditUser(Users user)
    {
        Console.WriteLine($"Chuyển sang chế độ sửa người dùng: {user.Id}");
        currentUser = new Users
            {
                Id = user.Id,
                FullName = user.FullName,
                Phone = user.Phone,
                Address = user.Address,
                AccountId = user.AccountId,
                Account = user.Account
            };
        isEditMode = true;
    }

    private void ResetForm()
    {
        Console.WriteLine("Đặt lại form");
        currentUser = new Users();
        isEditMode = false;
    }

    private async Task HandleValidSubmit()
    {
        try
        {
            // Tìm Account tương ứng với AccountId
            currentUser.Account = accounts?.FirstOrDefault(a => a.Id == currentUser.AccountId);
            if (currentUser.Account == null && currentUser.AccountId != 0)
            {
                await JSRuntime.InvokeVoidAsync("alert", "Tài khoản không hợp lệ.");
                return;
            }

            HttpResponseMessage response;
            if (isEditMode)
            {
                Console.WriteLine($"Cập nhật user: {System.Text.Json.JsonSerializer.Serialize(currentUser)}");
                response = await Http.PutAsJsonAsync($"https://localhost:44366/api/user/{currentUser.Id}", currentUser);
            }
            else
            {
                Console.WriteLine($"Thêm user: {System.Text.Json.JsonSerializer.Serialize(currentUser)}");
                response = await Http.PostAsJsonAsync("https://localhost:44366/api/user", currentUser);
            }

            if (!response.IsSuccessStatusCode)
            {
                var error = await response.Content.ReadAsStringAsync();
                Console.WriteLine($"Lỗi từ server: {error}");
                await JSRuntime.InvokeVoidAsync("alert", $"Thao tác thất bại. Lỗi: {error}");
                return;
            }

            await LoadUsers();
            ResetForm();
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Lỗi: {ex.Message} - {ex.StackTrace}");
            await JSRuntime.InvokeVoidAsync("alert", $"Lỗi: {ex.Message}");
        }
    }

    private async Task DeleteUser(int id)
    {
        bool confirmed = await JSRuntime.InvokeAsync<bool>("confirm", "Bạn có chắc chắn muốn xóa người dùng này?");
        if (!confirmed) return;

        try
        {
            Console.WriteLine($"Xóa user ID: {id}");
            var response = await Http.DeleteAsync($"https://localhost:44366/api/user/{id}");
            if (!response.IsSuccessStatusCode)
            {
                var error = await response.Content.ReadAsStringAsync();
                await JSRuntime.InvokeVoidAsync("alert", $"Xóa thất bại. Lỗi: {error}");
                return;
            }

            await LoadUsers();
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Lỗi: {ex.Message} - {ex.StackTrace}");
            await JSRuntime.InvokeVoidAsync("alert", $"Lỗi: {ex.Message}");
        }
    }
}